
3d_interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000784  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  000007f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000828  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011b4  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2d  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a07  00000000  00000000  00002529  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  00002f30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000552  00000000  00000000  000031f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b3e  00000000  00000000  00003742  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004280  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ad 30       	cpi	r26, 0x0D	; 13
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 66 03 	call	0x6cc	; 0x6cc <main>
  88:	0c 94 c0 03 	jmp	0x780	; 0x780 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  90:	42 9a       	sbi	0x08, 2	; 8
  92:	00 c0       	rjmp	.+0      	; 0x94 <toggle_e+0x4>
  94:	42 98       	cbi	0x08, 2	; 8
  96:	08 95       	ret

00000098 <lcd_write>:
  98:	cf 93       	push	r28
  9a:	c8 2f       	mov	r28, r24
  9c:	66 23       	and	r22, r22
  9e:	11 f0       	breq	.+4      	; 0xa4 <lcd_write+0xc>
  a0:	41 9a       	sbi	0x08, 1	; 8
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <lcd_write+0xe>
  a4:	41 98       	cbi	0x08, 1	; 8
  a6:	43 98       	cbi	0x08, 3	; 8
  a8:	22 9a       	sbi	0x04, 2	; 4
  aa:	23 9a       	sbi	0x04, 3	; 4
  ac:	24 9a       	sbi	0x04, 4	; 4
  ae:	25 9a       	sbi	0x04, 5	; 4
  b0:	2d 98       	cbi	0x05, 5	; 5
  b2:	2c 98       	cbi	0x05, 4	; 5
  b4:	2b 98       	cbi	0x05, 3	; 5
  b6:	2a 98       	cbi	0x05, 2	; 5
  b8:	cc 23       	and	r28, r28
  ba:	0c f4       	brge	.+2      	; 0xbe <lcd_write+0x26>
  bc:	2d 9a       	sbi	0x05, 5	; 5
  be:	c6 fd       	sbrc	r28, 6
  c0:	2c 9a       	sbi	0x05, 4	; 5
  c2:	c5 fd       	sbrc	r28, 5
  c4:	2b 9a       	sbi	0x05, 3	; 5
  c6:	c4 fd       	sbrc	r28, 4
  c8:	2a 9a       	sbi	0x05, 2	; 5
  ca:	0e 94 48 00 	call	0x90	; 0x90 <toggle_e>
  ce:	2d 98       	cbi	0x05, 5	; 5
  d0:	2c 98       	cbi	0x05, 4	; 5
  d2:	2b 98       	cbi	0x05, 3	; 5
  d4:	2a 98       	cbi	0x05, 2	; 5
  d6:	c3 fd       	sbrc	r28, 3
  d8:	2d 9a       	sbi	0x05, 5	; 5
  da:	c2 fd       	sbrc	r28, 2
  dc:	2c 9a       	sbi	0x05, 4	; 5
  de:	c1 fd       	sbrc	r28, 1
  e0:	2b 9a       	sbi	0x05, 3	; 5
  e2:	c0 fd       	sbrc	r28, 0
  e4:	2a 9a       	sbi	0x05, 2	; 5
  e6:	0e 94 48 00 	call	0x90	; 0x90 <toggle_e>
  ea:	2a 9a       	sbi	0x05, 2	; 5
  ec:	2b 9a       	sbi	0x05, 3	; 5
  ee:	2c 9a       	sbi	0x05, 4	; 5
  f0:	2d 9a       	sbi	0x05, 5	; 5
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <lcd_read>:
  f6:	88 23       	and	r24, r24
  f8:	11 f0       	breq	.+4      	; 0xfe <lcd_read+0x8>
  fa:	41 9a       	sbi	0x08, 1	; 8
  fc:	01 c0       	rjmp	.+2      	; 0x100 <lcd_read+0xa>
  fe:	41 98       	cbi	0x08, 1	; 8
 100:	43 9a       	sbi	0x08, 3	; 8
 102:	22 98       	cbi	0x04, 2	; 4
 104:	23 98       	cbi	0x04, 3	; 4
 106:	24 98       	cbi	0x04, 4	; 4
 108:	25 98       	cbi	0x04, 5	; 4
 10a:	42 9a       	sbi	0x08, 2	; 8
 10c:	00 c0       	rjmp	.+0      	; 0x10e <lcd_read+0x18>
 10e:	1a 9b       	sbis	0x03, 2	; 3
 110:	02 c0       	rjmp	.+4      	; 0x116 <lcd_read+0x20>
 112:	80 e1       	ldi	r24, 0x10	; 16
 114:	01 c0       	rjmp	.+2      	; 0x118 <lcd_read+0x22>
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	1b 99       	sbic	0x03, 3	; 3
 11a:	80 62       	ori	r24, 0x20	; 32
 11c:	1c 99       	sbic	0x03, 4	; 3
 11e:	80 64       	ori	r24, 0x40	; 64
 120:	1d 99       	sbic	0x03, 5	; 3
 122:	80 68       	ori	r24, 0x80	; 128
 124:	42 98       	cbi	0x08, 2	; 8
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_read+0x32>
 128:	42 9a       	sbi	0x08, 2	; 8
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_read+0x36>
 12c:	1a 99       	sbic	0x03, 2	; 3
 12e:	81 60       	ori	r24, 0x01	; 1
 130:	1b 99       	sbic	0x03, 3	; 3
 132:	82 60       	ori	r24, 0x02	; 2
 134:	1c 99       	sbic	0x03, 4	; 3
 136:	84 60       	ori	r24, 0x04	; 4
 138:	1d 99       	sbic	0x03, 5	; 3
 13a:	88 60       	ori	r24, 0x08	; 8
 13c:	42 98       	cbi	0x08, 2	; 8
 13e:	08 95       	ret

00000140 <lcd_waitbusy>:
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	c0 e6       	ldi	r28, 0x60	; 96
 146:	da ee       	ldi	r29, 0xEA	; 234
 148:	01 c0       	rjmp	.+2      	; 0x14c <lcd_waitbusy+0xc>
 14a:	21 97       	sbiw	r28, 0x01	; 1
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_read>
 152:	88 23       	and	r24, r24
 154:	14 f4       	brge	.+4      	; 0x15a <lcd_waitbusy+0x1a>
 156:	20 97       	sbiw	r28, 0x00	; 0
 158:	c1 f7       	brne	.-16     	; 0x14a <lcd_waitbusy+0xa>
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <lcd_waitbusy+0x1e>
 162:	cd 2b       	or	r28, r29
 164:	21 f0       	breq	.+8      	; 0x16e <lcd_waitbusy+0x2e>
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_read>
 16c:	01 c0       	rjmp	.+2      	; 0x170 <lcd_waitbusy+0x30>
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <lcd_command>:
 176:	cf 93       	push	r28
 178:	c8 2f       	mov	r28, r24
 17a:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_waitbusy>
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	8c 2f       	mov	r24, r28
 182:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_write>
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <lcd_gotoxy>:
 18a:	61 11       	cpse	r22, r1
 18c:	04 c0       	rjmp	.+8      	; 0x196 <lcd_gotoxy+0xc>
 18e:	80 58       	subi	r24, 0x80	; 128
 190:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_command>
 194:	08 95       	ret
 196:	80 54       	subi	r24, 0x40	; 64
 198:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_command>
 19c:	08 95       	ret

0000019e <lcd_clrscr>:
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_command>
 1a4:	08 95       	ret

000001a6 <lcd_putc>:
 1a6:	cf 93       	push	r28
 1a8:	c8 2f       	mov	r28, r24
 1aa:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_waitbusy>
 1ae:	ca 30       	cpi	r28, 0x0A	; 10
 1b0:	49 f4       	brne	.+18     	; 0x1c4 <lcd_putc+0x1e>
 1b2:	80 34       	cpi	r24, 0x40	; 64
 1b4:	10 f0       	brcs	.+4      	; 0x1ba <lcd_putc+0x14>
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <lcd_putc+0x16>
 1ba:	80 e4       	ldi	r24, 0x40	; 64
 1bc:	80 58       	subi	r24, 0x80	; 128
 1be:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_command>
 1c2:	13 c0       	rjmp	.+38     	; 0x1ea <lcd_putc+0x44>
 1c4:	80 31       	cpi	r24, 0x10	; 16
 1c6:	29 f4       	brne	.+10     	; 0x1d2 <lcd_putc+0x2c>
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	80 ec       	ldi	r24, 0xC0	; 192
 1cc:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_write>
 1d0:	06 c0       	rjmp	.+12     	; 0x1de <lcd_putc+0x38>
 1d2:	80 35       	cpi	r24, 0x50	; 80
 1d4:	21 f4       	brne	.+8      	; 0x1de <lcd_putc+0x38>
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	80 e8       	ldi	r24, 0x80	; 128
 1da:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_write>
 1de:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_waitbusy>
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	8c 2f       	mov	r24, r28
 1e6:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_write>
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <lcd_puts>:
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	ec 01       	movw	r28, r24
 1f4:	21 96       	adiw	r28, 0x01	; 1
 1f6:	fc 01       	movw	r30, r24
 1f8:	80 81       	ld	r24, Z
 1fa:	88 23       	and	r24, r24
 1fc:	29 f0       	breq	.+10     	; 0x208 <lcd_puts+0x1a>
 1fe:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_putc>
 202:	89 91       	ld	r24, Y+
 204:	81 11       	cpse	r24, r1
 206:	fb cf       	rjmp	.-10     	; 0x1fe <lcd_puts+0x10>
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
uint8_t lcd_init(uint8_t dispAttr)
{
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 216:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 218:	3b 9a       	sbi	0x07, 3	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 21a:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 21c:	22 9a       	sbi	0x04, 2	; 4
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 21e:	23 9a       	sbi	0x04, 3	; 4
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 220:	24 9a       	sbi	0x04, 4	; 4
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 222:	25 9a       	sbi	0x04, 5	; 4
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 224:	80 e9       	ldi	r24, 0x90	; 144
 226:	99 e3       	ldi	r25, 0x39	; 57
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcd_init+0x1a>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 22c:	2b 9a       	sbi	0x05, 3	; 5
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 22e:	2a 9a       	sbi	0x05, 2	; 5
    lcd_e_toggle();
 230:	0e 94 48 00 	call	0x90	; 0x90 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 234:	85 ef       	ldi	r24, 0xF5	; 245
 236:	91 e1       	ldi	r25, 0x11	; 17
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 23c:	0e 94 48 00 	call	0x90	; 0x90 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 240:	ca e3       	ldi	r28, 0x3A	; 58
 242:	d0 e0       	ldi	r29, 0x00	; 0
 244:	ce 01       	movw	r24, r28
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 24a:	0e 94 48 00 	call	0x90	; 0x90 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 24e:	ce 01       	movw	r24, r28
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 254:	2a 98       	cbi	0x05, 2	; 5
    lcd_e_toggle();
 256:	0e 94 48 00 	call	0x90	; 0x90 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 25a:	21 97       	sbiw	r28, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 25e:	88 e2       	ldi	r24, 0x28	; 40
 260:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_command>
#endif
    if (lcd_waitbusy() != 0xff)
 264:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_waitbusy>
 268:	8f 3f       	cpi	r24, 0xFF	; 255
 26a:	61 f0       	breq	.+24     	; 0x284 <lcd_init+0x76>
    {
      lcd_command(LCD_DISP_OFF);              /* display off                  */
 26c:	88 e0       	ldi	r24, 0x08	; 8
 26e:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_command>
      lcd_clrscr();                           /* display clear                */
 272:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_clrscr>
      lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 276:	86 e0       	ldi	r24, 0x06	; 6
 278:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_command>
      lcd_command(dispAttr);                  /* display/cursor control       */
 27c:	81 2f       	mov	r24, r17
 27e:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_command>
      return 0;
 282:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
      return 0xff;
    }

}/* lcd_init */
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	1f 91       	pop	r17
 28a:	08 95       	ret

0000028c <init_display>:
#define mains 50
#define refresh 2 * 1000000 / mains


void init_display(){
	lcd_init(LCD_DISP_ON);
 28c:	8c e0       	ldi	r24, 0x0C	; 12
 28e:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_init>
 292:	08 95       	ret

00000294 <init>:
}

void init (void)
{
	DDRC &= (0 << PC0);         // pins 0 of PORTC as input
 294:	87 b1       	in	r24, 0x07	; 7
 296:	17 b8       	out	0x07, r1	; 7
	
	DDRC &= (0 << PC4);         // pins 4 of PORTC as input
 298:	87 b1       	in	r24, 0x07	; 7
 29a:	17 b8       	out	0x07, r1	; 7
	
	DDRC &= (0 << PC5);         // pins 5 of PORTC as input
 29c:	87 b1       	in	r24, 0x07	; 7
 29e:	17 b8       	out	0x07, r1	; 7
	
	// run 8-bit TIMER on f_cpu
	// normal operation
	
	TCCR0A = (0 << COM0A1) | (0 << COM0A0) | (0 << COM0B1) | (0 << COM0B0)
 2a0:	14 bc       	out	0x24, r1	; 36
	| (0 << WGM01) | (0 << WGM00 );							// set mode
	TCCR0B = (0 << WGM02)  //| (0 << WGM13)
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	85 bd       	out	0x25, r24	; 37
	| (0 << CS02) | (1 << CS01) | (1 << CS00);				// set prescaler clk/64
	TIMSK0 = (0 << OCIE0B) | (0 << OCIE0A) | (1 << TOIE0 ); // interrupt on Timer 0 overflow
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 2ac:	08 95       	ret

000002ae <startTimer>:

volatile unsigned long timer0_overflow_count;
volatile unsigned long checkval;

void startTimer() {
	timer0_overflow_count = 0;
 2ae:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <timer0_overflow_count>
 2b2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <timer0_overflow_count+0x1>
 2b6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <timer0_overflow_count+0x2>
 2ba:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <timer0_overflow_count+0x3>
	TCNT0 = 0;
 2be:	16 bc       	out	0x26, r1	; 38
 2c0:	08 95       	ret

000002c2 <ReadPlateX>:
}

void ReadPlateX(){
 2c2:	8f 92       	push	r8
 2c4:	9f 92       	push	r9
 2c6:	af 92       	push	r10
 2c8:	bf 92       	push	r11
 2ca:	cf 92       	push	r12
 2cc:	df 92       	push	r13
 2ce:	ef 92       	push	r14
 2d0:	ff 92       	push	r15
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
 2da:	64 97       	sbiw	r28, 0x14	; 20
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	f8 94       	cli
 2e0:	de bf       	out	0x3e, r29	; 62
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	cd bf       	out	0x3d, r28	; 61
	unsigned long count = 0;
	unsigned long total = 0;
	char y[20];
	
	while(checkval < refresh) {
 2e6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <checkval>
 2ea:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <checkval+0x1>
 2ee:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <checkval+0x2>
 2f2:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <checkval+0x3>
 2f6:	80 34       	cpi	r24, 0x40	; 64
 2f8:	9c 49       	sbci	r25, 0x9C	; 156
 2fa:	a1 05       	cpc	r26, r1
 2fc:	b1 05       	cpc	r27, r1
 2fe:	28 f5       	brcc	.+74     	; 0x34a <ReadPlateX+0x88>
 300:	81 2c       	mov	r8, r1
 302:	91 2c       	mov	r9, r1
 304:	54 01       	movw	r10, r8
 306:	c1 2c       	mov	r12, r1
 308:	d1 2c       	mov	r13, r1
 30a:	76 01       	movw	r14, r12

		DDRC |= (1 << PC0);         // pin 0 of PORTC as output
 30c:	38 9a       	sbi	0x07, 0	; 7
		PORTC = 0x00;				// switch PC0 to low output
 30e:	18 b8       	out	0x08, r1	; 8
		
		DDRC &= ~(1 << PC0);         // pin 0 of PORTC as input
 310:	38 98       	cbi	0x07, 0	; 7
		
		while((PINC & 0b00000001) == 0){
 312:	30 99       	sbic	0x06, 0	; 6
 314:	07 c0       	rjmp	.+14     	; 0x324 <ReadPlateX+0x62>
			count++;
 316:	8f ef       	ldi	r24, 0xFF	; 255
 318:	c8 1a       	sub	r12, r24
 31a:	d8 0a       	sbc	r13, r24
 31c:	e8 0a       	sbc	r14, r24
 31e:	f8 0a       	sbc	r15, r24
		DDRC |= (1 << PC0);         // pin 0 of PORTC as output
		PORTC = 0x00;				// switch PC0 to low output
		
		DDRC &= ~(1 << PC0);         // pin 0 of PORTC as input
		
		while((PINC & 0b00000001) == 0){
 320:	30 9b       	sbis	0x06, 0	; 6
 322:	f9 cf       	rjmp	.-14     	; 0x316 <ReadPlateX+0x54>
			count++;
		}
		total++;
 324:	9f ef       	ldi	r25, 0xFF	; 255
 326:	89 1a       	sub	r8, r25
 328:	99 0a       	sbc	r9, r25
 32a:	a9 0a       	sbc	r10, r25
 32c:	b9 0a       	sbc	r11, r25
void ReadPlateX(){
	unsigned long count = 0;
	unsigned long total = 0;
	char y[20];
	
	while(checkval < refresh) {
 32e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <checkval>
 332:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <checkval+0x1>
 336:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <checkval+0x2>
 33a:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <checkval+0x3>
 33e:	80 34       	cpi	r24, 0x40	; 64
 340:	9c 49       	sbci	r25, 0x9C	; 156
 342:	a1 05       	cpc	r26, r1
 344:	b1 05       	cpc	r27, r1
 346:	10 f3       	brcs	.-60     	; 0x30c <ReadPlateX+0x4a>
 348:	06 c0       	rjmp	.+12     	; 0x356 <ReadPlateX+0x94>
	TCNT0 = 0;
}

void ReadPlateX(){
	unsigned long count = 0;
	unsigned long total = 0;
 34a:	81 2c       	mov	r8, r1
 34c:	91 2c       	mov	r9, r1
 34e:	54 01       	movw	r10, r8
	timer0_overflow_count = 0;
	TCNT0 = 0;
}

void ReadPlateX(){
	unsigned long count = 0;
 350:	c1 2c       	mov	r12, r1
 352:	d1 2c       	mov	r13, r1
 354:	76 01       	movw	r14, r12
			count++;
		}
		total++;
	}
	
	startTimer();
 356:	0e 94 57 01 	call	0x2ae	; 0x2ae <startTimer>
	

	lcd_gotoxy(0,0);
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_gotoxy>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 362:	c7 01       	movw	r24, r14
 364:	b6 01       	movw	r22, r12
 366:	05 2e       	mov	r0, r21
 368:	5a e0       	ldi	r21, 0x0A	; 10
 36a:	66 0f       	add	r22, r22
 36c:	77 1f       	adc	r23, r23
 36e:	88 1f       	adc	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	5a 95       	dec	r21
 374:	d1 f7       	brne	.-12     	; 0x36a <ReadPlateX+0xa8>
 376:	50 2d       	mov	r21, r0
 378:	a5 01       	movw	r20, r10
 37a:	94 01       	movw	r18, r8
 37c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__udivmodsi4>
 380:	da 01       	movw	r26, r20
 382:	c9 01       	movw	r24, r18
 384:	4a e0       	ldi	r20, 0x0A	; 10
 386:	be 01       	movw	r22, r28
 388:	6f 5f       	subi	r22, 0xFF	; 255
 38a:	7f 4f       	sbci	r23, 0xFF	; 255
 38c:	0e 94 96 03 	call	0x72c	; 0x72c <__utoa_ncheck>
	utoa(((count << resolution)/total), y, 10);
	lcd_puts(y);
 390:	ce 01       	movw	r24, r28
 392:	01 96       	adiw	r24, 0x01	; 1
 394:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 398:	8f e1       	ldi	r24, 0x1F	; 31
 39a:	9e e4       	ldi	r25, 0x4E	; 78
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <ReadPlateX+0xda>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <ReadPlateX+0xe0>
 3a2:	00 00       	nop
	_delay_ms(5);

}
 3a4:	64 96       	adiw	r28, 0x14	; 20
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	f8 94       	cli
 3aa:	de bf       	out	0x3e, r29	; 62
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	cd bf       	out	0x3d, r28	; 61
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	ff 90       	pop	r15
 3b6:	ef 90       	pop	r14
 3b8:	df 90       	pop	r13
 3ba:	cf 90       	pop	r12
 3bc:	bf 90       	pop	r11
 3be:	af 90       	pop	r10
 3c0:	9f 90       	pop	r9
 3c2:	8f 90       	pop	r8
 3c4:	08 95       	ret

000003c6 <ReadPlateY>:

void ReadPlateY(){
 3c6:	8f 92       	push	r8
 3c8:	9f 92       	push	r9
 3ca:	af 92       	push	r10
 3cc:	bf 92       	push	r11
 3ce:	cf 92       	push	r12
 3d0:	df 92       	push	r13
 3d2:	ef 92       	push	r14
 3d4:	ff 92       	push	r15
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62
 3de:	64 97       	sbiw	r28, 0x14	; 20
 3e0:	0f b6       	in	r0, 0x3f	; 63
 3e2:	f8 94       	cli
 3e4:	de bf       	out	0x3e, r29	; 62
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	cd bf       	out	0x3d, r28	; 61
	unsigned long count = 0;
	unsigned long total = 0;
	char y[20];
	
	while(checkval < refresh) {
 3ea:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <checkval>
 3ee:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <checkval+0x1>
 3f2:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <checkval+0x2>
 3f6:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <checkval+0x3>
 3fa:	80 34       	cpi	r24, 0x40	; 64
 3fc:	9c 49       	sbci	r25, 0x9C	; 156
 3fe:	a1 05       	cpc	r26, r1
 400:	b1 05       	cpc	r27, r1
 402:	28 f5       	brcc	.+74     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 404:	81 2c       	mov	r8, r1
 406:	91 2c       	mov	r9, r1
 408:	54 01       	movw	r10, r8
 40a:	c1 2c       	mov	r12, r1
 40c:	d1 2c       	mov	r13, r1
 40e:	76 01       	movw	r14, r12
		
		DDRC |= (1 << PC4);         // pin 0 of PORTC as output
 410:	3c 9a       	sbi	0x07, 4	; 7
		PORTC = 0x00;				// switch PC0 to low output
 412:	18 b8       	out	0x08, r1	; 8
		
		DDRC &= ~(1 << PC4);         // pin 0 of PORTC as input
 414:	3c 98       	cbi	0x07, 4	; 7
		
		while((PINC & 0b00010000) == 0){
 416:	34 99       	sbic	0x06, 4	; 6
 418:	07 c0       	rjmp	.+14     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			count++;
 41a:	8f ef       	ldi	r24, 0xFF	; 255
 41c:	c8 1a       	sub	r12, r24
 41e:	d8 0a       	sbc	r13, r24
 420:	e8 0a       	sbc	r14, r24
 422:	f8 0a       	sbc	r15, r24
		DDRC |= (1 << PC4);         // pin 0 of PORTC as output
		PORTC = 0x00;				// switch PC0 to low output
		
		DDRC &= ~(1 << PC4);         // pin 0 of PORTC as input
		
		while((PINC & 0b00010000) == 0){
 424:	34 9b       	sbis	0x06, 4	; 6
 426:	f9 cf       	rjmp	.-14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
			count++;
		}
		total++;
 428:	9f ef       	ldi	r25, 0xFF	; 255
 42a:	89 1a       	sub	r8, r25
 42c:	99 0a       	sbc	r9, r25
 42e:	a9 0a       	sbc	r10, r25
 430:	b9 0a       	sbc	r11, r25
void ReadPlateY(){
	unsigned long count = 0;
	unsigned long total = 0;
	char y[20];
	
	while(checkval < refresh) {
 432:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <checkval>
 436:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <checkval+0x1>
 43a:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <checkval+0x2>
 43e:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <checkval+0x3>
 442:	80 34       	cpi	r24, 0x40	; 64
 444:	9c 49       	sbci	r25, 0x9C	; 156
 446:	a1 05       	cpc	r26, r1
 448:	b1 05       	cpc	r27, r1
 44a:	10 f3       	brcs	.-60     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 44c:	06 c0       	rjmp	.+12     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>

}

void ReadPlateY(){
	unsigned long count = 0;
	unsigned long total = 0;
 44e:	81 2c       	mov	r8, r1
 450:	91 2c       	mov	r9, r1
 452:	54 01       	movw	r10, r8
	_delay_ms(5);

}

void ReadPlateY(){
	unsigned long count = 0;
 454:	c1 2c       	mov	r12, r1
 456:	d1 2c       	mov	r13, r1
 458:	76 01       	movw	r14, r12
		}
		total++;

	}
	
	startTimer();
 45a:	0e 94 57 01 	call	0x2ae	; 0x2ae <startTimer>
	
	
	lcd_gotoxy(6,0);
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	86 e0       	ldi	r24, 0x06	; 6
 462:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_gotoxy>
 466:	c7 01       	movw	r24, r14
 468:	b6 01       	movw	r22, r12
 46a:	05 2e       	mov	r0, r21
 46c:	5a e0       	ldi	r21, 0x0A	; 10
 46e:	66 0f       	add	r22, r22
 470:	77 1f       	adc	r23, r23
 472:	88 1f       	adc	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	5a 95       	dec	r21
 478:	d1 f7       	brne	.-12     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 47a:	50 2d       	mov	r21, r0
 47c:	a5 01       	movw	r20, r10
 47e:	94 01       	movw	r18, r8
 480:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__udivmodsi4>
 484:	da 01       	movw	r26, r20
 486:	c9 01       	movw	r24, r18
 488:	4a e0       	ldi	r20, 0x0A	; 10
 48a:	be 01       	movw	r22, r28
 48c:	6f 5f       	subi	r22, 0xFF	; 255
 48e:	7f 4f       	sbci	r23, 0xFF	; 255
 490:	0e 94 96 03 	call	0x72c	; 0x72c <__utoa_ncheck>
	utoa(((count << resolution)/total), y, 10);
	lcd_puts(y);
 494:	ce 01       	movw	r24, r28
 496:	01 96       	adiw	r24, 0x01	; 1
 498:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_puts>
 49c:	8f e1       	ldi	r24, 0x1F	; 31
 49e:	9e e4       	ldi	r25, 0x4E	; 78
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4a6:	00 00       	nop
	_delay_ms(5);

}
 4a8:	64 96       	adiw	r28, 0x14	; 20
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	f8 94       	cli
 4ae:	de bf       	out	0x3e, r29	; 62
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	cd bf       	out	0x3d, r28	; 61
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	ff 90       	pop	r15
 4ba:	ef 90       	pop	r14
 4bc:	df 90       	pop	r13
 4be:	cf 90       	pop	r12
 4c0:	bf 90       	pop	r11
 4c2:	af 90       	pop	r10
 4c4:	9f 90       	pop	r9
 4c6:	8f 90       	pop	r8
 4c8:	08 95       	ret

000004ca <ReadPlateZ>:

void ReadPlateZ(){
 4ca:	8f 92       	push	r8
 4cc:	9f 92       	push	r9
 4ce:	af 92       	push	r10
 4d0:	bf 92       	push	r11
 4d2:	cf 92       	push	r12
 4d4:	df 92       	push	r13
 4d6:	ef 92       	push	r14
 4d8:	ff 92       	push	r15
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	cd b7       	in	r28, 0x3d	; 61
 4e0:	de b7       	in	r29, 0x3e	; 62
 4e2:	64 97       	sbiw	r28, 0x14	; 20
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	f8 94       	cli
 4e8:	de bf       	out	0x3e, r29	; 62
 4ea:	0f be       	out	0x3f, r0	; 63
 4ec:	cd bf       	out	0x3d, r28	; 61
	unsigned long count = 0;
	unsigned long total = 0;
	char y[20];
	
	while(checkval < refresh) {
 4ee:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <checkval>
 4f2:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <checkval+0x1>
 4f6:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <checkval+0x2>
 4fa:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <checkval+0x3>
 4fe:	80 34       	cpi	r24, 0x40	; 64
 500:	9c 49       	sbci	r25, 0x9C	; 156
 502:	a1 05       	cpc	r26, r1
 504:	b1 05       	cpc	r27, r1
 506:	28 f5       	brcc	.+74     	; 0x552 <ReadPlateZ+0x88>
 508:	81 2c       	mov	r8, r1
 50a:	91 2c       	mov	r9, r1
 50c:	54 01       	movw	r10, r8
 50e:	c1 2c       	mov	r12, r1
 510:	d1 2c       	mov	r13, r1
 512:	76 01       	movw	r14, r12
	
		DDRC |= (1 << PC5);         // pin 0 of PORTC as output
 514:	3d 9a       	sbi	0x07, 5	; 7
		PORTC = 0x00;				// switch PC0 to low output
 516:	18 b8       	out	0x08, r1	; 8
		
		DDRC &= ~(1 << PC5);        // pin 0 of PORTC as input
 518:	3d 98       	cbi	0x07, 5	; 7
		
		while((PINC & 0b00100000) == 0){
 51a:	35 99       	sbic	0x06, 5	; 6
 51c:	07 c0       	rjmp	.+14     	; 0x52c <ReadPlateZ+0x62>
			count++;
 51e:	8f ef       	ldi	r24, 0xFF	; 255
 520:	c8 1a       	sub	r12, r24
 522:	d8 0a       	sbc	r13, r24
 524:	e8 0a       	sbc	r14, r24
 526:	f8 0a       	sbc	r15, r24
		DDRC |= (1 << PC5);         // pin 0 of PORTC as output
		PORTC = 0x00;				// switch PC0 to low output
		
		DDRC &= ~(1 << PC5);        // pin 0 of PORTC as input
		
		while((PINC & 0b00100000) == 0){
 528:	35 9b       	sbis	0x06, 5	; 6
 52a:	f9 cf       	rjmp	.-14     	; 0x51e <ReadPlateZ+0x54>
			count++;
		}
		total++;
 52c:	9f ef       	ldi	r25, 0xFF	; 255
 52e:	89 1a       	sub	r8, r25
 530:	99 0a       	sbc	r9, r25
 532:	a9 0a       	sbc	r10, r25
 534:	b9 0a       	sbc	r11, r25
void ReadPlateZ(){
	unsigned long count = 0;
	unsigned long total = 0;
	char y[20];
	
	while(checkval < refresh) {
 536:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <checkval>
 53a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <checkval+0x1>
 53e:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <checkval+0x2>
 542:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <checkval+0x3>
 546:	80 34       	cpi	r24, 0x40	; 64
 548:	9c 49       	sbci	r25, 0x9C	; 156
 54a:	a1 05       	cpc	r26, r1
 54c:	b1 05       	cpc	r27, r1
 54e:	10 f3       	brcs	.-60     	; 0x514 <ReadPlateZ+0x4a>
 550:	06 c0       	rjmp	.+12     	; 0x55e <ReadPlateZ+0x94>

}

void ReadPlateZ(){
	unsigned long count = 0;
	unsigned long total = 0;
 552:	81 2c       	mov	r8, r1
 554:	91 2c       	mov	r9, r1
 556:	54 01       	movw	r10, r8
	_delay_ms(5);

}

void ReadPlateZ(){
	unsigned long count = 0;
 558:	c1 2c       	mov	r12, r1
 55a:	d1 2c       	mov	r13, r1
 55c:	76 01       	movw	r14, r12
		}
		total++;
		
	}
	
	startTimer();
 55e:	0e 94 57 01 	call	0x2ae	; 0x2ae <startTimer>
	
	//lcd_clrscr();
	lcd_gotoxy(0,1);
 562:	61 e0       	ldi	r22, 0x01	; 1
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_gotoxy>
 56a:	c7 01       	movw	r24, r14
 56c:	b6 01       	movw	r22, r12
 56e:	05 2e       	mov	r0, r21
 570:	5a e0       	ldi	r21, 0x0A	; 10
 572:	66 0f       	add	r22, r22
 574:	77 1f       	adc	r23, r23
 576:	88 1f       	adc	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	5a 95       	dec	r21
 57c:	d1 f7       	brne	.-12     	; 0x572 <ReadPlateZ+0xa8>
 57e:	50 2d       	mov	r21, r0
 580:	a5 01       	movw	r20, r10
 582:	94 01       	movw	r18, r8
 584:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__udivmodsi4>
 588:	da 01       	movw	r26, r20
 58a:	c9 01       	movw	r24, r18
 58c:	4a e0       	ldi	r20, 0x0A	; 10
 58e:	be 01       	movw	r22, r28
 590:	6f 5f       	subi	r22, 0xFF	; 255
 592:	7f 4f       	sbci	r23, 0xFF	; 255
 594:	0e 94 96 03 	call	0x72c	; 0x72c <__utoa_ncheck>
	utoa(((count << resolution)/total), y, 10);
	lcd_puts(y);
 598:	ce 01       	movw	r24, r28
 59a:	01 96       	adiw	r24, 0x01	; 1
 59c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_puts>
 5a0:	8f e1       	ldi	r24, 0x1F	; 31
 5a2:	9e e4       	ldi	r25, 0x4E	; 78
 5a4:	01 97       	sbiw	r24, 0x01	; 1
 5a6:	f1 f7       	brne	.-4      	; 0x5a4 <ReadPlateZ+0xda>
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <ReadPlateZ+0xe0>
 5aa:	00 00       	nop
	_delay_ms(5);

}
 5ac:	64 96       	adiw	r28, 0x14	; 20
 5ae:	0f b6       	in	r0, 0x3f	; 63
 5b0:	f8 94       	cli
 5b2:	de bf       	out	0x3e, r29	; 62
 5b4:	0f be       	out	0x3f, r0	; 63
 5b6:	cd bf       	out	0x3d, r28	; 61
 5b8:	df 91       	pop	r29
 5ba:	cf 91       	pop	r28
 5bc:	ff 90       	pop	r15
 5be:	ef 90       	pop	r14
 5c0:	df 90       	pop	r13
 5c2:	cf 90       	pop	r12
 5c4:	bf 90       	pop	r11
 5c6:	af 90       	pop	r10
 5c8:	9f 90       	pop	r9
 5ca:	8f 90       	pop	r8
 5cc:	08 95       	ret

000005ce <__vector_16>:



ISR(TIMER0_OVF_vect) {
 5ce:	1f 92       	push	r1
 5d0:	0f 92       	push	r0
 5d2:	0f b6       	in	r0, 0x3f	; 63
 5d4:	0f 92       	push	r0
 5d6:	11 24       	eor	r1, r1
 5d8:	2f 93       	push	r18
 5da:	3f 93       	push	r19
 5dc:	4f 93       	push	r20
 5de:	5f 93       	push	r21
 5e0:	6f 93       	push	r22
 5e2:	7f 93       	push	r23
 5e4:	8f 93       	push	r24
 5e6:	9f 93       	push	r25
 5e8:	af 93       	push	r26
 5ea:	bf 93       	push	r27
	static unsigned long timer0_millis = 0;
	static unsigned char timer0_fract = 0;
	
	timer0_millis += 1;
 5ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer0_millis.2445>
 5f0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <timer0_millis.2445+0x1>
 5f4:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <timer0_millis.2445+0x2>
 5f8:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <timer0_millis.2445+0x3>
 5fc:	ac 01       	movw	r20, r24
 5fe:	bd 01       	movw	r22, r26
 600:	4f 5f       	subi	r20, 0xFF	; 255
 602:	5f 4f       	sbci	r21, 0xFF	; 255
 604:	6f 4f       	sbci	r22, 0xFF	; 255
 606:	7f 4f       	sbci	r23, 0xFF	; 255
 608:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <timer0_millis.2445>
 60c:	50 93 02 01 	sts	0x0102, r21	; 0x800102 <timer0_millis.2445+0x1>
 610:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <timer0_millis.2445+0x2>
 614:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <timer0_millis.2445+0x3>
	timer0_fract += 3;
 618:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 61c:	33 e0       	ldi	r19, 0x03	; 3
 61e:	32 0f       	add	r19, r18
	
	if (timer0_fract >= 125) {
 620:	3d 37       	cpi	r19, 0x7D	; 125
 622:	18 f4       	brcc	.+6      	; 0x62a <__vector_16+0x5c>
ISR(TIMER0_OVF_vect) {
	static unsigned long timer0_millis = 0;
	static unsigned char timer0_fract = 0;
	
	timer0_millis += 1;
	timer0_fract += 3;
 624:	30 93 00 01 	sts	0x0100, r19	; 0x800100 <_edata>
 628:	0e c0       	rjmp	.+28     	; 0x646 <__vector_16+0x78>
	
	if (timer0_fract >= 125) {
		timer0_fract -= 125;
 62a:	2a 57       	subi	r18, 0x7A	; 122
 62c:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
		timer0_millis += 1;
 630:	02 96       	adiw	r24, 0x02	; 2
 632:	a1 1d       	adc	r26, r1
 634:	b1 1d       	adc	r27, r1
 636:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timer0_millis.2445>
 63a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <timer0_millis.2445+0x1>
 63e:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <timer0_millis.2445+0x2>
 642:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <timer0_millis.2445+0x3>
	}
	
	timer0_overflow_count++;
 646:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 64a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 64e:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 652:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 656:	01 96       	adiw	r24, 0x01	; 1
 658:	a1 1d       	adc	r26, r1
 65a:	b1 1d       	adc	r27, r1
 65c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0_overflow_count>
 660:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0_overflow_count+0x1>
 664:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0_overflow_count+0x2>
 668:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0_overflow_count+0x3>
	checkval = ((timer0_overflow_count << 8) + TCNT0) << 2;  //time in milliSec ?
 66c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 670:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 674:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 678:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 67c:	26 b5       	in	r18, 0x26	; 38
 67e:	ba 2f       	mov	r27, r26
 680:	a9 2f       	mov	r26, r25
 682:	98 2f       	mov	r25, r24
 684:	88 27       	eor	r24, r24
 686:	82 0f       	add	r24, r18
 688:	91 1d       	adc	r25, r1
 68a:	a1 1d       	adc	r26, r1
 68c:	b1 1d       	adc	r27, r1
 68e:	88 0f       	add	r24, r24
 690:	99 1f       	adc	r25, r25
 692:	aa 1f       	adc	r26, r26
 694:	bb 1f       	adc	r27, r27
 696:	88 0f       	add	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	aa 1f       	adc	r26, r26
 69c:	bb 1f       	adc	r27, r27
 69e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <checkval>
 6a2:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <checkval+0x1>
 6a6:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <checkval+0x2>
 6aa:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <checkval+0x3>
}
 6ae:	bf 91       	pop	r27
 6b0:	af 91       	pop	r26
 6b2:	9f 91       	pop	r25
 6b4:	8f 91       	pop	r24
 6b6:	7f 91       	pop	r23
 6b8:	6f 91       	pop	r22
 6ba:	5f 91       	pop	r21
 6bc:	4f 91       	pop	r20
 6be:	3f 91       	pop	r19
 6c0:	2f 91       	pop	r18
 6c2:	0f 90       	pop	r0
 6c4:	0f be       	out	0x3f, r0	; 63
 6c6:	0f 90       	pop	r0
 6c8:	1f 90       	pop	r1
 6ca:	18 95       	reti

000006cc <main>:

int main (void) {
	init();
 6cc:	0e 94 4a 01 	call	0x294	; 0x294 <init>
	sei();
 6d0:	78 94       	sei
	init_display();
 6d2:	0e 94 46 01 	call	0x28c	; 0x28c <init_display>
	startTimer();
 6d6:	0e 94 57 01 	call	0x2ae	; 0x2ae <startTimer>

	while (1)            // infinite main loop
	{
		
		
		ReadPlateX();
 6da:	0e 94 61 01 	call	0x2c2	; 0x2c2 <ReadPlateX>
		ReadPlateY();
 6de:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <ReadPlateY>
		ReadPlateZ();
 6e2:	0e 94 65 02 	call	0x4ca	; 0x4ca <ReadPlateZ>
 6e6:	f9 cf       	rjmp	.-14     	; 0x6da <main+0xe>

000006e8 <__udivmodsi4>:
 6e8:	a1 e2       	ldi	r26, 0x21	; 33
 6ea:	1a 2e       	mov	r1, r26
 6ec:	aa 1b       	sub	r26, r26
 6ee:	bb 1b       	sub	r27, r27
 6f0:	fd 01       	movw	r30, r26
 6f2:	0d c0       	rjmp	.+26     	; 0x70e <__udivmodsi4_ep>

000006f4 <__udivmodsi4_loop>:
 6f4:	aa 1f       	adc	r26, r26
 6f6:	bb 1f       	adc	r27, r27
 6f8:	ee 1f       	adc	r30, r30
 6fa:	ff 1f       	adc	r31, r31
 6fc:	a2 17       	cp	r26, r18
 6fe:	b3 07       	cpc	r27, r19
 700:	e4 07       	cpc	r30, r20
 702:	f5 07       	cpc	r31, r21
 704:	20 f0       	brcs	.+8      	; 0x70e <__udivmodsi4_ep>
 706:	a2 1b       	sub	r26, r18
 708:	b3 0b       	sbc	r27, r19
 70a:	e4 0b       	sbc	r30, r20
 70c:	f5 0b       	sbc	r31, r21

0000070e <__udivmodsi4_ep>:
 70e:	66 1f       	adc	r22, r22
 710:	77 1f       	adc	r23, r23
 712:	88 1f       	adc	r24, r24
 714:	99 1f       	adc	r25, r25
 716:	1a 94       	dec	r1
 718:	69 f7       	brne	.-38     	; 0x6f4 <__udivmodsi4_loop>
 71a:	60 95       	com	r22
 71c:	70 95       	com	r23
 71e:	80 95       	com	r24
 720:	90 95       	com	r25
 722:	9b 01       	movw	r18, r22
 724:	ac 01       	movw	r20, r24
 726:	bd 01       	movw	r22, r26
 728:	cf 01       	movw	r24, r30
 72a:	08 95       	ret

0000072c <__utoa_ncheck>:
 72c:	bb 27       	eor	r27, r27

0000072e <__utoa_common>:
 72e:	fb 01       	movw	r30, r22
 730:	55 27       	eor	r21, r21
 732:	aa 27       	eor	r26, r26
 734:	88 0f       	add	r24, r24
 736:	99 1f       	adc	r25, r25
 738:	aa 1f       	adc	r26, r26
 73a:	a4 17       	cp	r26, r20
 73c:	10 f0       	brcs	.+4      	; 0x742 <__utoa_common+0x14>
 73e:	a4 1b       	sub	r26, r20
 740:	83 95       	inc	r24
 742:	50 51       	subi	r21, 0x10	; 16
 744:	b9 f7       	brne	.-18     	; 0x734 <__utoa_common+0x6>
 746:	a0 5d       	subi	r26, 0xD0	; 208
 748:	aa 33       	cpi	r26, 0x3A	; 58
 74a:	08 f0       	brcs	.+2      	; 0x74e <__utoa_common+0x20>
 74c:	a9 5d       	subi	r26, 0xD9	; 217
 74e:	a1 93       	st	Z+, r26
 750:	00 97       	sbiw	r24, 0x00	; 0
 752:	79 f7       	brne	.-34     	; 0x732 <__utoa_common+0x4>
 754:	b1 11       	cpse	r27, r1
 756:	b1 93       	st	Z+, r27
 758:	11 92       	st	Z+, r1
 75a:	cb 01       	movw	r24, r22
 75c:	0c 94 b0 03 	jmp	0x760	; 0x760 <strrev>

00000760 <strrev>:
 760:	dc 01       	movw	r26, r24
 762:	fc 01       	movw	r30, r24
 764:	67 2f       	mov	r22, r23
 766:	71 91       	ld	r23, Z+
 768:	77 23       	and	r23, r23
 76a:	e1 f7       	brne	.-8      	; 0x764 <strrev+0x4>
 76c:	32 97       	sbiw	r30, 0x02	; 2
 76e:	04 c0       	rjmp	.+8      	; 0x778 <strrev+0x18>
 770:	7c 91       	ld	r23, X
 772:	6d 93       	st	X+, r22
 774:	70 83       	st	Z, r23
 776:	62 91       	ld	r22, -Z
 778:	ae 17       	cp	r26, r30
 77a:	bf 07       	cpc	r27, r31
 77c:	c8 f3       	brcs	.-14     	; 0x770 <strrev+0x10>
 77e:	08 95       	ret

00000780 <_exit>:
 780:	f8 94       	cli

00000782 <__stop_program>:
 782:	ff cf       	rjmp	.-2      	; 0x782 <__stop_program>
