
3d_interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000782  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000070e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  00000782  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000782  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000127e  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9d  00000000  00000000  00001b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000af2  00000000  00000000  00002607  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  000030fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057e  00000000  00000000  000033b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ac8  00000000  00000000  0000392e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000043f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ad 30       	cpi	r26, 0x0D	; 13
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <main>
  88:	0c 94 85 03 	jmp	0x70a	; 0x70a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <start_timer>:
#include "interface.h"



void start_timer(){
	timer0_overflow_count = 0;
  90:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <timer0_overflow_count>
  94:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <timer0_overflow_count+0x1>
  98:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <timer0_overflow_count+0x2>
  9c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <timer0_overflow_count+0x3>
	TCNT0 = 0;
  a0:	16 bc       	out	0x26, r1	; 38
  a2:	08 95       	ret

000000a4 <init_interface>:
}


void init_interface(){
	DDRC &= (0 << PC0);         // pins 0 of PORTC as input
  a4:	87 b1       	in	r24, 0x07	; 7
  a6:	17 b8       	out	0x07, r1	; 7
	
	DDRC &= (0 << PC4);         // pins 4 of PORTC as input
  a8:	87 b1       	in	r24, 0x07	; 7
  aa:	17 b8       	out	0x07, r1	; 7
	
	DDRC &= (0 << PC5);         // pins 5 of PORTC as input
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	17 b8       	out	0x07, r1	; 7
	
	// run 8-bit TIMER on f_cpu
	// normal operation
	
	TCCR0A = (0 << COM0A1) | (0 << COM0A0) | (0 << COM0B1) | (0 << COM0B0)
  b0:	14 bc       	out	0x24, r1	; 36
	| (0 << WGM01) | (0 << WGM00 );							// set mode
	TCCR0B = (0 << WGM02)  //| (0 << WGM13)
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	85 bd       	out	0x25, r24	; 37
	| (0 << CS02) | (1 << CS01) | (1 << CS00);				// set prescaler clk/64
	TIMSK0 = (0 << OCIE0B) | (0 << OCIE0A) | (1 << TOIE0 ); // interrupt on Timer 0 overflow
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	sei();
  bc:	78 94       	sei
	
	start_timer();
  be:	0e 94 48 00 	call	0x90	; 0x90 <start_timer>
  c2:	08 95       	ret

000000c4 <read_plate_x>:
}

unsigned long read_plate_x(){
  c4:	8f 92       	push	r8
  c6:	9f 92       	push	r9
  c8:	af 92       	push	r10
  ca:	bf 92       	push	r11
  cc:	cf 92       	push	r12
  ce:	df 92       	push	r13
  d0:	ef 92       	push	r14
  d2:	ff 92       	push	r15
	
	unsigned long count = 0;
	unsigned long total = 0;
	
	while(checkval < refresh) {
  d4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <checkval>
  d8:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <checkval+0x1>
  dc:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <checkval+0x2>
  e0:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <checkval+0x3>
  e4:	80 34       	cpi	r24, 0x40	; 64
  e6:	9c 49       	sbci	r25, 0x9C	; 156
  e8:	a1 05       	cpc	r26, r1
  ea:	b1 05       	cpc	r27, r1
  ec:	28 f5       	brcc	.+74     	; 0x138 <read_plate_x+0x74>
  ee:	81 2c       	mov	r8, r1
  f0:	91 2c       	mov	r9, r1
  f2:	54 01       	movw	r10, r8
  f4:	c1 2c       	mov	r12, r1
  f6:	d1 2c       	mov	r13, r1
  f8:	76 01       	movw	r14, r12

		DDRC |= (1 << PC0);         // pin 0 of PORTC as output
  fa:	38 9a       	sbi	0x07, 0	; 7
		PORTC = 0x00;				// switch PORTC to low output
  fc:	18 b8       	out	0x08, r1	; 8
		
		DDRC &= ~(1 << PC0);         // pin 0 of PORTC as input
  fe:	38 98       	cbi	0x07, 0	; 7
		
		while((PINC & 0b00000001) == 0){
 100:	30 99       	sbic	0x06, 0	; 6
 102:	07 c0       	rjmp	.+14     	; 0x112 <read_plate_x+0x4e>
			count++;
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	c8 1a       	sub	r12, r24
 108:	d8 0a       	sbc	r13, r24
 10a:	e8 0a       	sbc	r14, r24
 10c:	f8 0a       	sbc	r15, r24
		DDRC |= (1 << PC0);         // pin 0 of PORTC as output
		PORTC = 0x00;				// switch PORTC to low output
		
		DDRC &= ~(1 << PC0);         // pin 0 of PORTC as input
		
		while((PINC & 0b00000001) == 0){
 10e:	30 9b       	sbis	0x06, 0	; 6
 110:	f9 cf       	rjmp	.-14     	; 0x104 <read_plate_x+0x40>
			count++;
		}
		total++;
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	82 1a       	sub	r8, r18
 116:	92 0a       	sbc	r9, r18
 118:	a2 0a       	sbc	r10, r18
 11a:	b2 0a       	sbc	r11, r18
unsigned long read_plate_x(){
	
	unsigned long count = 0;
	unsigned long total = 0;
	
	while(checkval < refresh) {
 11c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <checkval>
 120:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <checkval+0x1>
 124:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <checkval+0x2>
 128:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <checkval+0x3>
 12c:	80 34       	cpi	r24, 0x40	; 64
 12e:	9c 49       	sbci	r25, 0x9C	; 156
 130:	a1 05       	cpc	r26, r1
 132:	b1 05       	cpc	r27, r1
 134:	10 f3       	brcs	.-60     	; 0xfa <read_plate_x+0x36>
 136:	06 c0       	rjmp	.+12     	; 0x144 <read_plate_x+0x80>
}

unsigned long read_plate_x(){
	
	unsigned long count = 0;
	unsigned long total = 0;
 138:	81 2c       	mov	r8, r1
 13a:	91 2c       	mov	r9, r1
 13c:	54 01       	movw	r10, r8
	start_timer();
}

unsigned long read_plate_x(){
	
	unsigned long count = 0;
 13e:	c1 2c       	mov	r12, r1
 140:	d1 2c       	mov	r13, r1
 142:	76 01       	movw	r14, r12
			count++;
		}
		total++;
	}
	
	start_timer();
 144:	0e 94 48 00 	call	0x90	; 0x90 <start_timer>
	
	return (count << resolution)/total;
 148:	9e 2d       	mov	r25, r14
 14a:	8d 2d       	mov	r24, r13
 14c:	7c 2d       	mov	r23, r12
 14e:	66 27       	eor	r22, r22
 150:	a5 01       	movw	r20, r10
 152:	94 01       	movw	r18, r8
 154:	0e 94 39 03 	call	0x672	; 0x672 <__udivmodsi4>
}
 158:	ca 01       	movw	r24, r20
 15a:	b9 01       	movw	r22, r18
 15c:	ff 90       	pop	r15
 15e:	ef 90       	pop	r14
 160:	df 90       	pop	r13
 162:	cf 90       	pop	r12
 164:	bf 90       	pop	r11
 166:	af 90       	pop	r10
 168:	9f 90       	pop	r9
 16a:	8f 90       	pop	r8
 16c:	08 95       	ret

0000016e <read_plate_y>:

unsigned long read_plate_y(){
 16e:	8f 92       	push	r8
 170:	9f 92       	push	r9
 172:	af 92       	push	r10
 174:	bf 92       	push	r11
 176:	cf 92       	push	r12
 178:	df 92       	push	r13
 17a:	ef 92       	push	r14
 17c:	ff 92       	push	r15
	
	unsigned long count = 0;
	unsigned long total = 0;
	
	while(checkval < refresh) {
 17e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <checkval>
 182:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <checkval+0x1>
 186:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <checkval+0x2>
 18a:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <checkval+0x3>
 18e:	80 34       	cpi	r24, 0x40	; 64
 190:	9c 49       	sbci	r25, 0x9C	; 156
 192:	a1 05       	cpc	r26, r1
 194:	b1 05       	cpc	r27, r1
 196:	28 f5       	brcc	.+74     	; 0x1e2 <read_plate_y+0x74>
 198:	81 2c       	mov	r8, r1
 19a:	91 2c       	mov	r9, r1
 19c:	54 01       	movw	r10, r8
 19e:	c1 2c       	mov	r12, r1
 1a0:	d1 2c       	mov	r13, r1
 1a2:	76 01       	movw	r14, r12
		
		DDRC |= (1 << PC4);         // pin 0 of PORTC as output
 1a4:	3c 9a       	sbi	0x07, 4	; 7
		PORTC = 0x00;				// switch PORTC to low output
 1a6:	18 b8       	out	0x08, r1	; 8
		
		DDRC &= ~(1 << PC4);         // pin 0 of PORTC as input
 1a8:	3c 98       	cbi	0x07, 4	; 7
		
		while((PINC & 0b00010000) == 0){
 1aa:	34 99       	sbic	0x06, 4	; 6
 1ac:	07 c0       	rjmp	.+14     	; 0x1bc <read_plate_y+0x4e>
			count++;
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	c8 1a       	sub	r12, r24
 1b2:	d8 0a       	sbc	r13, r24
 1b4:	e8 0a       	sbc	r14, r24
 1b6:	f8 0a       	sbc	r15, r24
		DDRC |= (1 << PC4);         // pin 0 of PORTC as output
		PORTC = 0x00;				// switch PORTC to low output
		
		DDRC &= ~(1 << PC4);         // pin 0 of PORTC as input
		
		while((PINC & 0b00010000) == 0){
 1b8:	34 9b       	sbis	0x06, 4	; 6
 1ba:	f9 cf       	rjmp	.-14     	; 0x1ae <read_plate_y+0x40>
			count++;
		}
		total++;
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	82 1a       	sub	r8, r18
 1c0:	92 0a       	sbc	r9, r18
 1c2:	a2 0a       	sbc	r10, r18
 1c4:	b2 0a       	sbc	r11, r18
unsigned long read_plate_y(){
	
	unsigned long count = 0;
	unsigned long total = 0;
	
	while(checkval < refresh) {
 1c6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <checkval>
 1ca:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <checkval+0x1>
 1ce:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <checkval+0x2>
 1d2:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <checkval+0x3>
 1d6:	80 34       	cpi	r24, 0x40	; 64
 1d8:	9c 49       	sbci	r25, 0x9C	; 156
 1da:	a1 05       	cpc	r26, r1
 1dc:	b1 05       	cpc	r27, r1
 1de:	10 f3       	brcs	.-60     	; 0x1a4 <read_plate_y+0x36>
 1e0:	06 c0       	rjmp	.+12     	; 0x1ee <read_plate_y+0x80>
}

unsigned long read_plate_y(){
	
	unsigned long count = 0;
	unsigned long total = 0;
 1e2:	81 2c       	mov	r8, r1
 1e4:	91 2c       	mov	r9, r1
 1e6:	54 01       	movw	r10, r8
	return (count << resolution)/total;
}

unsigned long read_plate_y(){
	
	unsigned long count = 0;
 1e8:	c1 2c       	mov	r12, r1
 1ea:	d1 2c       	mov	r13, r1
 1ec:	76 01       	movw	r14, r12
		}
		total++;

	}
	
	start_timer();
 1ee:	0e 94 48 00 	call	0x90	; 0x90 <start_timer>
		
	return (count << resolution)/total;
 1f2:	9e 2d       	mov	r25, r14
 1f4:	8d 2d       	mov	r24, r13
 1f6:	7c 2d       	mov	r23, r12
 1f8:	66 27       	eor	r22, r22
 1fa:	a5 01       	movw	r20, r10
 1fc:	94 01       	movw	r18, r8
 1fe:	0e 94 39 03 	call	0x672	; 0x672 <__udivmodsi4>
}
 202:	ca 01       	movw	r24, r20
 204:	b9 01       	movw	r22, r18
 206:	ff 90       	pop	r15
 208:	ef 90       	pop	r14
 20a:	df 90       	pop	r13
 20c:	cf 90       	pop	r12
 20e:	bf 90       	pop	r11
 210:	af 90       	pop	r10
 212:	9f 90       	pop	r9
 214:	8f 90       	pop	r8
 216:	08 95       	ret

00000218 <read_plate_z>:

unsigned long read_plate_z(){
 218:	8f 92       	push	r8
 21a:	9f 92       	push	r9
 21c:	af 92       	push	r10
 21e:	bf 92       	push	r11
 220:	cf 92       	push	r12
 222:	df 92       	push	r13
 224:	ef 92       	push	r14
 226:	ff 92       	push	r15
	
	unsigned long count = 0;
	unsigned long total = 0;
	
	while(checkval < refresh) {
 228:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <checkval>
 22c:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <checkval+0x1>
 230:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <checkval+0x2>
 234:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <checkval+0x3>
 238:	80 34       	cpi	r24, 0x40	; 64
 23a:	9c 49       	sbci	r25, 0x9C	; 156
 23c:	a1 05       	cpc	r26, r1
 23e:	b1 05       	cpc	r27, r1
 240:	28 f5       	brcc	.+74     	; 0x28c <read_plate_z+0x74>
 242:	81 2c       	mov	r8, r1
 244:	91 2c       	mov	r9, r1
 246:	54 01       	movw	r10, r8
 248:	c1 2c       	mov	r12, r1
 24a:	d1 2c       	mov	r13, r1
 24c:	76 01       	movw	r14, r12
		
		DDRC |= (1 << PC5);         // pin 0 of PORTC as output
 24e:	3d 9a       	sbi	0x07, 5	; 7
		PORTC = 0x00;				// switch PORTC to low output
 250:	18 b8       	out	0x08, r1	; 8
		
		DDRC &= ~(1 << PC5);        // pin 0 of PORTC as input
 252:	3d 98       	cbi	0x07, 5	; 7
		
		while((PINC & 0b00100000) == 0){
 254:	35 99       	sbic	0x06, 5	; 6
 256:	07 c0       	rjmp	.+14     	; 0x266 <read_plate_z+0x4e>
			count++;
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	c8 1a       	sub	r12, r24
 25c:	d8 0a       	sbc	r13, r24
 25e:	e8 0a       	sbc	r14, r24
 260:	f8 0a       	sbc	r15, r24
		DDRC |= (1 << PC5);         // pin 0 of PORTC as output
		PORTC = 0x00;				// switch PORTC to low output
		
		DDRC &= ~(1 << PC5);        // pin 0 of PORTC as input
		
		while((PINC & 0b00100000) == 0){
 262:	35 9b       	sbis	0x06, 5	; 6
 264:	f9 cf       	rjmp	.-14     	; 0x258 <read_plate_z+0x40>
			count++;
		}
		total++;
 266:	2f ef       	ldi	r18, 0xFF	; 255
 268:	82 1a       	sub	r8, r18
 26a:	92 0a       	sbc	r9, r18
 26c:	a2 0a       	sbc	r10, r18
 26e:	b2 0a       	sbc	r11, r18
unsigned long read_plate_z(){
	
	unsigned long count = 0;
	unsigned long total = 0;
	
	while(checkval < refresh) {
 270:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <checkval>
 274:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <checkval+0x1>
 278:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <checkval+0x2>
 27c:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <checkval+0x3>
 280:	80 34       	cpi	r24, 0x40	; 64
 282:	9c 49       	sbci	r25, 0x9C	; 156
 284:	a1 05       	cpc	r26, r1
 286:	b1 05       	cpc	r27, r1
 288:	10 f3       	brcs	.-60     	; 0x24e <read_plate_z+0x36>
 28a:	06 c0       	rjmp	.+12     	; 0x298 <read_plate_z+0x80>
}

unsigned long read_plate_z(){
	
	unsigned long count = 0;
	unsigned long total = 0;
 28c:	81 2c       	mov	r8, r1
 28e:	91 2c       	mov	r9, r1
 290:	54 01       	movw	r10, r8
	return (count << resolution)/total;
}

unsigned long read_plate_z(){
	
	unsigned long count = 0;
 292:	c1 2c       	mov	r12, r1
 294:	d1 2c       	mov	r13, r1
 296:	76 01       	movw	r14, r12
		}
		total++;
		
	}
	
	start_timer();
 298:	0e 94 48 00 	call	0x90	; 0x90 <start_timer>
	
	return (count << resolution)/total;
 29c:	9e 2d       	mov	r25, r14
 29e:	8d 2d       	mov	r24, r13
 2a0:	7c 2d       	mov	r23, r12
 2a2:	66 27       	eor	r22, r22
 2a4:	a5 01       	movw	r20, r10
 2a6:	94 01       	movw	r18, r8
 2a8:	0e 94 39 03 	call	0x672	; 0x672 <__udivmodsi4>
}
 2ac:	ca 01       	movw	r24, r20
 2ae:	b9 01       	movw	r22, r18
 2b0:	ff 90       	pop	r15
 2b2:	ef 90       	pop	r14
 2b4:	df 90       	pop	r13
 2b6:	cf 90       	pop	r12
 2b8:	bf 90       	pop	r11
 2ba:	af 90       	pop	r10
 2bc:	9f 90       	pop	r9
 2be:	8f 90       	pop	r8
 2c0:	08 95       	ret

000002c2 <__vector_16>:


ISR(TIMER0_OVF_vect) {
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	2f 93       	push	r18
 2ce:	3f 93       	push	r19
 2d0:	4f 93       	push	r20
 2d2:	5f 93       	push	r21
 2d4:	6f 93       	push	r22
 2d6:	7f 93       	push	r23
 2d8:	8f 93       	push	r24
 2da:	9f 93       	push	r25
 2dc:	af 93       	push	r26
 2de:	bf 93       	push	r27
	static unsigned long timer0_millis = 0;
	static unsigned char timer0_fract = 0;
	
	timer0_millis += 1;
 2e0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer0_millis.2298>
 2e4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <timer0_millis.2298+0x1>
 2e8:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <timer0_millis.2298+0x2>
 2ec:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <timer0_millis.2298+0x3>
 2f0:	ac 01       	movw	r20, r24
 2f2:	bd 01       	movw	r22, r26
 2f4:	4f 5f       	subi	r20, 0xFF	; 255
 2f6:	5f 4f       	sbci	r21, 0xFF	; 255
 2f8:	6f 4f       	sbci	r22, 0xFF	; 255
 2fa:	7f 4f       	sbci	r23, 0xFF	; 255
 2fc:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <timer0_millis.2298>
 300:	50 93 02 01 	sts	0x0102, r21	; 0x800102 <timer0_millis.2298+0x1>
 304:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <timer0_millis.2298+0x2>
 308:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <timer0_millis.2298+0x3>
	timer0_fract += 3;
 30c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 310:	33 e0       	ldi	r19, 0x03	; 3
 312:	32 0f       	add	r19, r18
	
	if (timer0_fract >= 125) {
 314:	3d 37       	cpi	r19, 0x7D	; 125
 316:	18 f4       	brcc	.+6      	; 0x31e <__vector_16+0x5c>
ISR(TIMER0_OVF_vect) {
	static unsigned long timer0_millis = 0;
	static unsigned char timer0_fract = 0;
	
	timer0_millis += 1;
	timer0_fract += 3;
 318:	30 93 00 01 	sts	0x0100, r19	; 0x800100 <_edata>
 31c:	0e c0       	rjmp	.+28     	; 0x33a <__vector_16+0x78>
	
	if (timer0_fract >= 125) {
		timer0_fract -= 125;
 31e:	2a 57       	subi	r18, 0x7A	; 122
 320:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
		timer0_millis += 1;
 324:	02 96       	adiw	r24, 0x02	; 2
 326:	a1 1d       	adc	r26, r1
 328:	b1 1d       	adc	r27, r1
 32a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timer0_millis.2298>
 32e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <timer0_millis.2298+0x1>
 332:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <timer0_millis.2298+0x2>
 336:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <timer0_millis.2298+0x3>
	}
	
	timer0_overflow_count++;
 33a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 33e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 342:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 346:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 34a:	01 96       	adiw	r24, 0x01	; 1
 34c:	a1 1d       	adc	r26, r1
 34e:	b1 1d       	adc	r27, r1
 350:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0_overflow_count>
 354:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0_overflow_count+0x1>
 358:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0_overflow_count+0x2>
 35c:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0_overflow_count+0x3>
	checkval = ((timer0_overflow_count << 8) + TCNT0) << 2;  //time in milliSec ?
 360:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 364:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 368:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 36c:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 370:	26 b5       	in	r18, 0x26	; 38
 372:	ba 2f       	mov	r27, r26
 374:	a9 2f       	mov	r26, r25
 376:	98 2f       	mov	r25, r24
 378:	88 27       	eor	r24, r24
 37a:	82 0f       	add	r24, r18
 37c:	91 1d       	adc	r25, r1
 37e:	a1 1d       	adc	r26, r1
 380:	b1 1d       	adc	r27, r1
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	aa 1f       	adc	r26, r26
 388:	bb 1f       	adc	r27, r27
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	aa 1f       	adc	r26, r26
 390:	bb 1f       	adc	r27, r27
 392:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <checkval>
 396:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <checkval+0x1>
 39a:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <checkval+0x2>
 39e:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <checkval+0x3>
}
 3a2:	bf 91       	pop	r27
 3a4:	af 91       	pop	r26
 3a6:	9f 91       	pop	r25
 3a8:	8f 91       	pop	r24
 3aa:	7f 91       	pop	r23
 3ac:	6f 91       	pop	r22
 3ae:	5f 91       	pop	r21
 3b0:	4f 91       	pop	r20
 3b2:	3f 91       	pop	r19
 3b4:	2f 91       	pop	r18
 3b6:	0f 90       	pop	r0
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	0f 90       	pop	r0
 3bc:	1f 90       	pop	r1
 3be:	18 95       	reti

000003c0 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 3c0:	42 9a       	sbi	0x08, 2	; 8
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <toggle_e+0x4>
 3c4:	42 98       	cbi	0x08, 2	; 8
 3c6:	08 95       	ret

000003c8 <lcd_write>:
 3c8:	cf 93       	push	r28
 3ca:	c8 2f       	mov	r28, r24
 3cc:	66 23       	and	r22, r22
 3ce:	11 f0       	breq	.+4      	; 0x3d4 <lcd_write+0xc>
 3d0:	41 9a       	sbi	0x08, 1	; 8
 3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <lcd_write+0xe>
 3d4:	41 98       	cbi	0x08, 1	; 8
 3d6:	43 98       	cbi	0x08, 3	; 8
 3d8:	22 9a       	sbi	0x04, 2	; 4
 3da:	23 9a       	sbi	0x04, 3	; 4
 3dc:	24 9a       	sbi	0x04, 4	; 4
 3de:	25 9a       	sbi	0x04, 5	; 4
 3e0:	2d 98       	cbi	0x05, 5	; 5
 3e2:	2c 98       	cbi	0x05, 4	; 5
 3e4:	2b 98       	cbi	0x05, 3	; 5
 3e6:	2a 98       	cbi	0x05, 2	; 5
 3e8:	cc 23       	and	r28, r28
 3ea:	0c f4       	brge	.+2      	; 0x3ee <lcd_write+0x26>
 3ec:	2d 9a       	sbi	0x05, 5	; 5
 3ee:	c6 fd       	sbrc	r28, 6
 3f0:	2c 9a       	sbi	0x05, 4	; 5
 3f2:	c5 fd       	sbrc	r28, 5
 3f4:	2b 9a       	sbi	0x05, 3	; 5
 3f6:	c4 fd       	sbrc	r28, 4
 3f8:	2a 9a       	sbi	0x05, 2	; 5
 3fa:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <toggle_e>
 3fe:	2d 98       	cbi	0x05, 5	; 5
 400:	2c 98       	cbi	0x05, 4	; 5
 402:	2b 98       	cbi	0x05, 3	; 5
 404:	2a 98       	cbi	0x05, 2	; 5
 406:	c3 fd       	sbrc	r28, 3
 408:	2d 9a       	sbi	0x05, 5	; 5
 40a:	c2 fd       	sbrc	r28, 2
 40c:	2c 9a       	sbi	0x05, 4	; 5
 40e:	c1 fd       	sbrc	r28, 1
 410:	2b 9a       	sbi	0x05, 3	; 5
 412:	c0 fd       	sbrc	r28, 0
 414:	2a 9a       	sbi	0x05, 2	; 5
 416:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <toggle_e>
 41a:	2a 9a       	sbi	0x05, 2	; 5
 41c:	2b 9a       	sbi	0x05, 3	; 5
 41e:	2c 9a       	sbi	0x05, 4	; 5
 420:	2d 9a       	sbi	0x05, 5	; 5
 422:	cf 91       	pop	r28
 424:	08 95       	ret

00000426 <lcd_read>:
 426:	88 23       	and	r24, r24
 428:	11 f0       	breq	.+4      	; 0x42e <lcd_read+0x8>
 42a:	41 9a       	sbi	0x08, 1	; 8
 42c:	01 c0       	rjmp	.+2      	; 0x430 <lcd_read+0xa>
 42e:	41 98       	cbi	0x08, 1	; 8
 430:	43 9a       	sbi	0x08, 3	; 8
 432:	22 98       	cbi	0x04, 2	; 4
 434:	23 98       	cbi	0x04, 3	; 4
 436:	24 98       	cbi	0x04, 4	; 4
 438:	25 98       	cbi	0x04, 5	; 4
 43a:	42 9a       	sbi	0x08, 2	; 8
 43c:	00 c0       	rjmp	.+0      	; 0x43e <lcd_read+0x18>
 43e:	1a 9b       	sbis	0x03, 2	; 3
 440:	02 c0       	rjmp	.+4      	; 0x446 <lcd_read+0x20>
 442:	80 e1       	ldi	r24, 0x10	; 16
 444:	01 c0       	rjmp	.+2      	; 0x448 <lcd_read+0x22>
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	1b 99       	sbic	0x03, 3	; 3
 44a:	80 62       	ori	r24, 0x20	; 32
 44c:	1c 99       	sbic	0x03, 4	; 3
 44e:	80 64       	ori	r24, 0x40	; 64
 450:	1d 99       	sbic	0x03, 5	; 3
 452:	80 68       	ori	r24, 0x80	; 128
 454:	42 98       	cbi	0x08, 2	; 8
 456:	00 c0       	rjmp	.+0      	; 0x458 <lcd_read+0x32>
 458:	42 9a       	sbi	0x08, 2	; 8
 45a:	00 c0       	rjmp	.+0      	; 0x45c <lcd_read+0x36>
 45c:	1a 99       	sbic	0x03, 2	; 3
 45e:	81 60       	ori	r24, 0x01	; 1
 460:	1b 99       	sbic	0x03, 3	; 3
 462:	82 60       	ori	r24, 0x02	; 2
 464:	1c 99       	sbic	0x03, 4	; 3
 466:	84 60       	ori	r24, 0x04	; 4
 468:	1d 99       	sbic	0x03, 5	; 3
 46a:	88 60       	ori	r24, 0x08	; 8
 46c:	42 98       	cbi	0x08, 2	; 8
 46e:	08 95       	ret

00000470 <lcd_waitbusy>:
 470:	cf 93       	push	r28
 472:	df 93       	push	r29
 474:	c0 e6       	ldi	r28, 0x60	; 96
 476:	da ee       	ldi	r29, 0xEA	; 234
 478:	01 c0       	rjmp	.+2      	; 0x47c <lcd_waitbusy+0xc>
 47a:	21 97       	sbiw	r28, 0x01	; 1
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	0e 94 13 02 	call	0x426	; 0x426 <lcd_read>
 482:	88 23       	and	r24, r24
 484:	14 f4       	brge	.+4      	; 0x48a <lcd_waitbusy+0x1a>
 486:	20 97       	sbiw	r28, 0x00	; 0
 488:	c1 f7       	brne	.-16     	; 0x47a <lcd_waitbusy+0xa>
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <lcd_waitbusy+0x1e>
 492:	cd 2b       	or	r28, r29
 494:	21 f0       	breq	.+8      	; 0x49e <lcd_waitbusy+0x2e>
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	0e 94 13 02 	call	0x426	; 0x426 <lcd_read>
 49c:	01 c0       	rjmp	.+2      	; 0x4a0 <lcd_waitbusy+0x30>
 49e:	8f ef       	ldi	r24, 0xFF	; 255
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	08 95       	ret

000004a6 <lcd_command>:
 4a6:	cf 93       	push	r28
 4a8:	c8 2f       	mov	r28, r24
 4aa:	0e 94 38 02 	call	0x470	; 0x470 <lcd_waitbusy>
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	8c 2f       	mov	r24, r28
 4b2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <lcd_write>
 4b6:	cf 91       	pop	r28
 4b8:	08 95       	ret

000004ba <lcd_gotoxy>:
 4ba:	61 11       	cpse	r22, r1
 4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <lcd_gotoxy+0xc>
 4be:	80 58       	subi	r24, 0x80	; 128
 4c0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_command>
 4c4:	08 95       	ret
 4c6:	80 54       	subi	r24, 0x40	; 64
 4c8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_command>
 4cc:	08 95       	ret

000004ce <lcd_clrscr>:
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_command>
 4d4:	08 95       	ret

000004d6 <lcd_putc>:
 4d6:	cf 93       	push	r28
 4d8:	c8 2f       	mov	r28, r24
 4da:	0e 94 38 02 	call	0x470	; 0x470 <lcd_waitbusy>
 4de:	ca 30       	cpi	r28, 0x0A	; 10
 4e0:	49 f4       	brne	.+18     	; 0x4f4 <lcd_putc+0x1e>
 4e2:	80 34       	cpi	r24, 0x40	; 64
 4e4:	10 f0       	brcs	.+4      	; 0x4ea <lcd_putc+0x14>
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	01 c0       	rjmp	.+2      	; 0x4ec <lcd_putc+0x16>
 4ea:	80 e4       	ldi	r24, 0x40	; 64
 4ec:	80 58       	subi	r24, 0x80	; 128
 4ee:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_command>
 4f2:	13 c0       	rjmp	.+38     	; 0x51a <lcd_putc+0x44>
 4f4:	80 31       	cpi	r24, 0x10	; 16
 4f6:	29 f4       	brne	.+10     	; 0x502 <lcd_putc+0x2c>
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	80 ec       	ldi	r24, 0xC0	; 192
 4fc:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <lcd_write>
 500:	06 c0       	rjmp	.+12     	; 0x50e <lcd_putc+0x38>
 502:	80 35       	cpi	r24, 0x50	; 80
 504:	21 f4       	brne	.+8      	; 0x50e <lcd_putc+0x38>
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	80 e8       	ldi	r24, 0x80	; 128
 50a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <lcd_write>
 50e:	0e 94 38 02 	call	0x470	; 0x470 <lcd_waitbusy>
 512:	61 e0       	ldi	r22, 0x01	; 1
 514:	8c 2f       	mov	r24, r28
 516:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <lcd_write>
 51a:	cf 91       	pop	r28
 51c:	08 95       	ret

0000051e <lcd_puts>:
 51e:	cf 93       	push	r28
 520:	df 93       	push	r29
 522:	ec 01       	movw	r28, r24
 524:	21 96       	adiw	r28, 0x01	; 1
 526:	fc 01       	movw	r30, r24
 528:	80 81       	ld	r24, Z
 52a:	88 23       	and	r24, r24
 52c:	29 f0       	breq	.+10     	; 0x538 <lcd_puts+0x1a>
 52e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <lcd_putc>
 532:	89 91       	ld	r24, Y+
 534:	81 11       	cpse	r24, r1
 536:	fb cf       	rjmp	.-10     	; 0x52e <lcd_puts+0x10>
 538:	df 91       	pop	r29
 53a:	cf 91       	pop	r28
 53c:	08 95       	ret

0000053e <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
uint8_t lcd_init(uint8_t dispAttr)
{
 53e:	1f 93       	push	r17
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
 544:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 546:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 548:	3b 9a       	sbi	0x07, 3	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 54a:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 54c:	22 9a       	sbi	0x04, 2	; 4
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 54e:	23 9a       	sbi	0x04, 3	; 4
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 550:	24 9a       	sbi	0x04, 4	; 4
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 552:	25 9a       	sbi	0x04, 5	; 4
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 554:	80 e9       	ldi	r24, 0x90	; 144
 556:	99 e3       	ldi	r25, 0x39	; 57
 558:	01 97       	sbiw	r24, 0x01	; 1
 55a:	f1 f7       	brne	.-4      	; 0x558 <lcd_init+0x1a>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 55c:	2b 9a       	sbi	0x05, 3	; 5
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 55e:	2a 9a       	sbi	0x05, 2	; 5
    lcd_e_toggle();
 560:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 564:	85 ef       	ldi	r24, 0xF5	; 245
 566:	91 e1       	ldi	r25, 0x11	; 17
 568:	01 97       	sbiw	r24, 0x01	; 1
 56a:	f1 f7       	brne	.-4      	; 0x568 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 56c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 570:	ca e3       	ldi	r28, 0x3A	; 58
 572:	d0 e0       	ldi	r29, 0x00	; 0
 574:	ce 01       	movw	r24, r28
 576:	01 97       	sbiw	r24, 0x01	; 1
 578:	f1 f7       	brne	.-4      	; 0x576 <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 57a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 57e:	ce 01       	movw	r24, r28
 580:	01 97       	sbiw	r24, 0x01	; 1
 582:	f1 f7       	brne	.-4      	; 0x580 <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 584:	2a 98       	cbi	0x05, 2	; 5
    lcd_e_toggle();
 586:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 58a:	21 97       	sbiw	r28, 0x01	; 1
 58c:	f1 f7       	brne	.-4      	; 0x58a <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 58e:	88 e2       	ldi	r24, 0x28	; 40
 590:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_command>
#endif
    if (lcd_waitbusy() != 0xff)
 594:	0e 94 38 02 	call	0x470	; 0x470 <lcd_waitbusy>
 598:	8f 3f       	cpi	r24, 0xFF	; 255
 59a:	61 f0       	breq	.+24     	; 0x5b4 <lcd_init+0x76>
    {
      lcd_command(LCD_DISP_OFF);              /* display off                  */
 59c:	88 e0       	ldi	r24, 0x08	; 8
 59e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_command>
      lcd_clrscr();                           /* display clear                */
 5a2:	0e 94 67 02 	call	0x4ce	; 0x4ce <lcd_clrscr>
      lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 5a6:	86 e0       	ldi	r24, 0x06	; 6
 5a8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_command>
      lcd_command(dispAttr);                  /* display/cursor control       */
 5ac:	81 2f       	mov	r24, r17
 5ae:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_command>
      return 0;
 5b2:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
      return 0xff;
    }

}/* lcd_init */
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	1f 91       	pop	r17
 5ba:	08 95       	ret

000005bc <init_display>:
#define mains 50
#define refresh 2 * 1000000 / mains


void init_display(){
	lcd_init(LCD_DISP_ON);
 5bc:	8c e0       	ldi	r24, 0x0C	; 12
 5be:	0e 94 9f 02 	call	0x53e	; 0x53e <lcd_init>
 5c2:	08 95       	ret

000005c4 <main>:
}


int main (void) {
 5c4:	cf 93       	push	r28
 5c6:	df 93       	push	r29
 5c8:	cd b7       	in	r28, 0x3d	; 61
 5ca:	de b7       	in	r29, 0x3e	; 62
 5cc:	64 97       	sbiw	r28, 0x14	; 20
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	f8 94       	cli
 5d2:	de bf       	out	0x3e, r29	; 62
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	cd bf       	out	0x3d, r28	; 61
	
	init_interface();
 5d8:	0e 94 52 00 	call	0xa4	; 0xa4 <init_interface>
	init_display();
 5dc:	0e 94 de 02 	call	0x5bc	; 0x5bc <init_display>

	while (1)            // infinite main loop
	{
		char text[20];
		
		lcd_gotoxy(0,0);
 5e0:	60 e0       	ldi	r22, 0x00	; 0
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_gotoxy>
		utoa(read_plate_x(), text, 10);
 5e8:	0e 94 62 00 	call	0xc4	; 0xc4 <read_plate_x>
 5ec:	dc 01       	movw	r26, r24
 5ee:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 5f0:	4a e0       	ldi	r20, 0x0A	; 10
 5f2:	be 01       	movw	r22, r28
 5f4:	6f 5f       	subi	r22, 0xFF	; 255
 5f6:	7f 4f       	sbci	r23, 0xFF	; 255
 5f8:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__utoa_ncheck>
		lcd_puts(text);
 5fc:	ce 01       	movw	r24, r28
 5fe:	01 96       	adiw	r24, 0x01	; 1
 600:	0e 94 8f 02 	call	0x51e	; 0x51e <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 604:	8f e1       	ldi	r24, 0x1F	; 31
 606:	9e e4       	ldi	r25, 0x4E	; 78
 608:	01 97       	sbiw	r24, 0x01	; 1
 60a:	f1 f7       	brne	.-4      	; 0x608 <main+0x44>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <main+0x4a>
 60e:	00 00       	nop
		_delay_ms(5);
		lcd_gotoxy(6,0);
 610:	60 e0       	ldi	r22, 0x00	; 0
 612:	86 e0       	ldi	r24, 0x06	; 6
 614:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_gotoxy>
		utoa(read_plate_y(), text, 10);
 618:	0e 94 b7 00 	call	0x16e	; 0x16e <read_plate_y>
 61c:	dc 01       	movw	r26, r24
 61e:	cb 01       	movw	r24, r22
 620:	4a e0       	ldi	r20, 0x0A	; 10
 622:	be 01       	movw	r22, r28
 624:	6f 5f       	subi	r22, 0xFF	; 255
 626:	7f 4f       	sbci	r23, 0xFF	; 255
 628:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__utoa_ncheck>
		lcd_puts(text);
 62c:	ce 01       	movw	r24, r28
 62e:	01 96       	adiw	r24, 0x01	; 1
 630:	0e 94 8f 02 	call	0x51e	; 0x51e <lcd_puts>
 634:	8f e1       	ldi	r24, 0x1F	; 31
 636:	9e e4       	ldi	r25, 0x4E	; 78
 638:	01 97       	sbiw	r24, 0x01	; 1
 63a:	f1 f7       	brne	.-4      	; 0x638 <main+0x74>
 63c:	00 c0       	rjmp	.+0      	; 0x63e <main+0x7a>
 63e:	00 00       	nop
		_delay_ms(5);lcd_gotoxy(0,1);
 640:	61 e0       	ldi	r22, 0x01	; 1
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_gotoxy>
		utoa(read_plate_z(), text, 10);
 648:	0e 94 0c 01 	call	0x218	; 0x218 <read_plate_z>
 64c:	dc 01       	movw	r26, r24
 64e:	cb 01       	movw	r24, r22
 650:	4a e0       	ldi	r20, 0x0A	; 10
 652:	be 01       	movw	r22, r28
 654:	6f 5f       	subi	r22, 0xFF	; 255
 656:	7f 4f       	sbci	r23, 0xFF	; 255
 658:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__utoa_ncheck>
		lcd_puts(text);
 65c:	ce 01       	movw	r24, r28
 65e:	01 96       	adiw	r24, 0x01	; 1
 660:	0e 94 8f 02 	call	0x51e	; 0x51e <lcd_puts>
 664:	8f e1       	ldi	r24, 0x1F	; 31
 666:	9e e4       	ldi	r25, 0x4E	; 78
 668:	01 97       	sbiw	r24, 0x01	; 1
 66a:	f1 f7       	brne	.-4      	; 0x668 <main+0xa4>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <main+0xaa>
 66e:	00 00       	nop
 670:	b7 cf       	rjmp	.-146    	; 0x5e0 <main+0x1c>

00000672 <__udivmodsi4>:
 672:	a1 e2       	ldi	r26, 0x21	; 33
 674:	1a 2e       	mov	r1, r26
 676:	aa 1b       	sub	r26, r26
 678:	bb 1b       	sub	r27, r27
 67a:	fd 01       	movw	r30, r26
 67c:	0d c0       	rjmp	.+26     	; 0x698 <__udivmodsi4_ep>

0000067e <__udivmodsi4_loop>:
 67e:	aa 1f       	adc	r26, r26
 680:	bb 1f       	adc	r27, r27
 682:	ee 1f       	adc	r30, r30
 684:	ff 1f       	adc	r31, r31
 686:	a2 17       	cp	r26, r18
 688:	b3 07       	cpc	r27, r19
 68a:	e4 07       	cpc	r30, r20
 68c:	f5 07       	cpc	r31, r21
 68e:	20 f0       	brcs	.+8      	; 0x698 <__udivmodsi4_ep>
 690:	a2 1b       	sub	r26, r18
 692:	b3 0b       	sbc	r27, r19
 694:	e4 0b       	sbc	r30, r20
 696:	f5 0b       	sbc	r31, r21

00000698 <__udivmodsi4_ep>:
 698:	66 1f       	adc	r22, r22
 69a:	77 1f       	adc	r23, r23
 69c:	88 1f       	adc	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	1a 94       	dec	r1
 6a2:	69 f7       	brne	.-38     	; 0x67e <__udivmodsi4_loop>
 6a4:	60 95       	com	r22
 6a6:	70 95       	com	r23
 6a8:	80 95       	com	r24
 6aa:	90 95       	com	r25
 6ac:	9b 01       	movw	r18, r22
 6ae:	ac 01       	movw	r20, r24
 6b0:	bd 01       	movw	r22, r26
 6b2:	cf 01       	movw	r24, r30
 6b4:	08 95       	ret

000006b6 <__utoa_ncheck>:
 6b6:	bb 27       	eor	r27, r27

000006b8 <__utoa_common>:
 6b8:	fb 01       	movw	r30, r22
 6ba:	55 27       	eor	r21, r21
 6bc:	aa 27       	eor	r26, r26
 6be:	88 0f       	add	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	aa 1f       	adc	r26, r26
 6c4:	a4 17       	cp	r26, r20
 6c6:	10 f0       	brcs	.+4      	; 0x6cc <__utoa_common+0x14>
 6c8:	a4 1b       	sub	r26, r20
 6ca:	83 95       	inc	r24
 6cc:	50 51       	subi	r21, 0x10	; 16
 6ce:	b9 f7       	brne	.-18     	; 0x6be <__utoa_common+0x6>
 6d0:	a0 5d       	subi	r26, 0xD0	; 208
 6d2:	aa 33       	cpi	r26, 0x3A	; 58
 6d4:	08 f0       	brcs	.+2      	; 0x6d8 <__utoa_common+0x20>
 6d6:	a9 5d       	subi	r26, 0xD9	; 217
 6d8:	a1 93       	st	Z+, r26
 6da:	00 97       	sbiw	r24, 0x00	; 0
 6dc:	79 f7       	brne	.-34     	; 0x6bc <__utoa_common+0x4>
 6de:	b1 11       	cpse	r27, r1
 6e0:	b1 93       	st	Z+, r27
 6e2:	11 92       	st	Z+, r1
 6e4:	cb 01       	movw	r24, r22
 6e6:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <strrev>

000006ea <strrev>:
 6ea:	dc 01       	movw	r26, r24
 6ec:	fc 01       	movw	r30, r24
 6ee:	67 2f       	mov	r22, r23
 6f0:	71 91       	ld	r23, Z+
 6f2:	77 23       	and	r23, r23
 6f4:	e1 f7       	brne	.-8      	; 0x6ee <strrev+0x4>
 6f6:	32 97       	sbiw	r30, 0x02	; 2
 6f8:	04 c0       	rjmp	.+8      	; 0x702 <strrev+0x18>
 6fa:	7c 91       	ld	r23, X
 6fc:	6d 93       	st	X+, r22
 6fe:	70 83       	st	Z, r23
 700:	62 91       	ld	r22, -Z
 702:	ae 17       	cp	r26, r30
 704:	bf 07       	cpc	r27, r31
 706:	c8 f3       	brcs	.-14     	; 0x6fa <strrev+0x10>
 708:	08 95       	ret

0000070a <_exit>:
 70a:	f8 94       	cli

0000070c <__stop_program>:
 70c:	ff cf       	rjmp	.-2      	; 0x70c <__stop_program>
